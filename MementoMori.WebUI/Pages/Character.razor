@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<MementoMoriFuncs>

@page "/Character"
@using MementoMori;
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data.DtoInfo
@using MementoMori.Ortega.Share.Enums
@using System.Collections.ObjectModel
@using global::Ortega.Share.Utils
@using MementoMori.Ortega.Common.Utils
@using MementoMori.Ortega.Custom
@using MementoMori.Ortega.Share.Calculators
@using MementoMori.Ortega.Share.Data.Battle
@using MementoMori.Ortega.Share.Data.Character

<PageTitle>角色</PageTitle>
<MudGrid>
    @if (_selectedCharactor != null)
    {
        var cmb = Masters.CharacterTable.GetById(_selectedCharactor.CharacterId);
        var name = Masters.TextResourceTable.Get(cmb.NameKey);

        <MudItem sm="12" md="4">
            <MudTabs MinimumTabWidth="20" HeaderPosition="TabHeaderPosition.Before">
                <Header>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudText Style="min-width: 100px">@name</MudText>
                    </MudStack>
                </Header>
                <ChildContent>
                    <MudTabPanel Text="属性">
                        <MudStack Elevation="0" Class="d-flex gap-1 flex-wrap" Row="true">
                            @foreach (var type in EnumUtil.GetValueList<BaseParameterType>())
                            {
                                var name = Masters.TextResourceTable.Get(type);
                                var value = _baseParameter.GetValue(type);
                                <MudField Label="@name" Variant="Variant.Outlined" Style="min-width: 60px">
                                    @(value.ToString("N0"))
                                </MudField>
                                @* <MudStack Spacing="0" AlignItems="AlignItems.Start"> *@
                                @*     <MudText Typo="Typo.subtitle2">@name</MudText> *@
                                @*     <MudText>@value</MudText> *@
                                @* </MudStack> *@
                            }
                        </MudStack>
                        <MudStack Elevation="0" Class="d-flex gap-1 flex-wrap" Row="true">
                            @foreach (var type in EnumUtil.GetValueList<BattleParameterType>())
                            {
                                var name = Masters.TextResourceTable.Get(type);
                                var value = _battleParameter.GetParameter(type);
                                <MudField Label="@name" Variant="Variant.Outlined" Style="min-width: 90px">
                                    @(value.ToString("N0"))
                                </MudField>
                            }
                        </MudStack>
                    </MudTabPanel>
                    <MudTabPanel Text="装备">
                        
                    </MudTabPanel>
                    <MudTabPanel Text="详细"></MudTabPanel>
                </ChildContent>
            </MudTabs>
        </MudItem>
    }
    <MudItem sm="12" md="8">
        <MudPaper Class="d-flex gap-2 flex-wrap" Elevation="0">
            @foreach (var character in (_userSyncData?.UserCharacterDtoInfos ?? new List<UserCharacterDtoInfo>()).OrderByDescending(d => d.RarityFlags))
            {
                var cmb = Masters.CharacterTable.GetById(character.CharacterId);
                var name = Masters.TextResourceTable.Get(cmb.NameKey);

                var jobName = Masters.TextResourceTable.Get(cmb.JobFlags);
                var rarity = Masters.TextResourceTable.Get(character.RarityFlags);

                var elemntColor = cmb.ElementType switch{
                    ElementType.Blue=> Colors.Blue.Default,
                    ElementType.Red=>Colors.Red.Darken1,
                    ElementType.Green=> Colors.Green.Darken1,
                    ElementType.Yellow=> Colors.Yellow.Darken1,
                    ElementType.Light=> Colors.Yellow.Lighten4,
                    ElementType.Dark=> Colors.Purple.Darken3,
                    _ => ""
                    };
                var battlePower = BattlePowerCalculatorUtil.GetUserCharacterBattlePower(character);

                <MudPaper Width="120px" @onclick="()=>SelectCharacter(character)">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0">
                        <MudPaper Elevation="0" Style="@($"background: {elemntColor}")" Class="rounded-circle pa-2"/>
                        <MudText>Lv@(character.Level)</MudText>
                        <MudSpacer/>
                        <MudIcon Class="ml-1" Size="Size.Small" Icon="@(character.IsLocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)"/>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@name</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>战力 @battlePower</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText>@jobName</MudText>
                        <MudText>@rarity</MudText>
                    </MudStack>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private UserSyncData? _userSyncData;
    private BaseParameter _baseParameter;
    private BattleParameter _battleParameter;
    private UserCharacterDtoInfo _selectedCharactor;

    protected override async Task OnInitializedAsync()
    {
        _userSyncData = ViewModel.UserSyncData;
        SelectCharacter(_userSyncData.UserCharacterDtoInfos.MaxBy(d=>d.Level));
    }

    private void SelectCharacter(UserCharacterDtoInfo info)
    {
        _selectedCharactor = info;
        var parameter = BattlePowerCalculatorUtil.CalcCharacterBattleParameter(info.Guid);
        _baseParameter = parameter.Item1;
        _battleParameter = parameter.Item2;
    }

}