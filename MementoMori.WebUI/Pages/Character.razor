@inject MementoMoriFuncs moriFuncs

@page "/Character"
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data.DtoInfo
@using MementoMori.Ortega.Share.Enums
@using System.Collections.ObjectModel
@using System.Reactive.Linq
@using DynamicData

<PageTitle>角色</PageTitle>

<h3>角色</h3>

<MudDataGrid Items="_userCharacters">
    <Columns>
        <PropertyColumn Property="x=>x.Name"></PropertyColumn>
        <PropertyColumn Property="x=>x.ElementType"></PropertyColumn>
        <PropertyColumn Property="x=>x.Level"></PropertyColumn>
        <PropertyColumn Property="x=>x.Exp"></PropertyColumn>
        <PropertyColumn Property="x=>x.RarityFlags"></PropertyColumn>
        <PropertyColumn Property="x=>x.IsLocked"></PropertyColumn>
    </Columns>
</MudDataGrid>

<MudGrid>
    @foreach (var character in (_userSyncData?.UserCharacterDtoInfos ?? new List<UserCharacterDtoInfo>()).OrderByDescending(d => d.RarityFlags))
    {
        var cmb = Masters.CharacterTable.GetById(character.CharacterId);
        var name = Masters.TextResourceTable.Get(cmb.NameKey);

        var elemntColor = cmb.ElementType switch{
            ElementType.Blue=> Colors.Blue.Default,
            ElementType.Red=>Colors.Red.Darken1,
            ElementType.Green=> Colors.Green.Darken1,
            ElementType.Yellow=> Colors.Yellow.Darken1,
            ElementType.Light=> Colors.Yellow.Lighten4,
            ElementType.Dark=> Colors.Purple.Darken3
            };

        <MudItem xs="6" sm="4" md="3" lg="2">
            <MudCard>
                <MudCardHeader>
                    <MudPaper Style="@($"background: {elemntColor}")" Class="rounded-circle pa-2 mr-2"></MudPaper>
                    @* <MudText>@cmb.ElementType</MudText> *@
                    <MudText>@name</MudText>
                    <MudIcon Class="ml-1" Size="Size.Small" Icon="@(character.IsLocked ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)"></MudIcon>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>等级: @character.Level</MudText>
                    <MudText>稀有度: @character.RarityFlags</MudText>
                    <MudText>职业: @cmb.JobFlags</MudText>
                    <MudText>经验值: @character.Exp</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>
<table class="table">
    <thead>
    <tr>
        <th>GUID</th>
        <th>名称</th>
        <th>等级</th>
        <th>稀有度</th>
        <th>属性</th>
        <th>职业</th>
        <th>锁定</th>
        <th>经验值</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var character in _userSyncData?.UserCharacterDtoInfos ?? new List<UserCharacterDtoInfo>())
    {
        var cmb = Masters.CharacterTable.GetById(character.CharacterId);
        var name = Masters.TextResourceTable.Get(cmb.NameKey);

        <tr>
            <td>@character.Guid</td>
            <td>@name</td>
            <td>@character.Level</td>
            <td>@character.RarityFlags</td>
            <td>@cmb.ElementType</td>
            <td>@cmb.JobFlags</td>
            <td>@character.IsLocked</td>
            <td>@character.Exp</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private RuntimeInfo _runtimeInfo;
    private UserSyncData? _userSyncData;

    private bool _logining;
    private bool _isQuickActionExecuting;
    private string _quickActionResult;
    private ObservableCollection<UserCharacter> _userCharacters = new();

    protected override async Task OnInitializedAsync()
    {
        moriFuncs.RuntimeInfoSubject.Subscribe(c =>
        {
            InvokeAsync(() =>
            {
                _runtimeInfo = c;
                StateHasChanged();
            });
        });
        moriFuncs.UserSyncData.SelectMany(d => d.UserCharacterDtoInfos)
            .Subscribe(info =>
            {
                var character = _userCharacters.FirstOrDefault(d => d.Guid == info.Guid);
                if (character == null)
                {
                    var characterMb = Masters.CharacterTable.GetById(info.CharacterId);
                    var name = Masters.TextResourceTable.Get(characterMb.NameKey);
                    character = new UserCharacter
                    {
                        Guid = info.Guid,
                        Name = name,
                        ElementType = characterMb.ElementType,
                        CharacterId = info.CharacterId,
                        Level = info.Level,
                        Exp = info.Exp,
                        RarityFlags = info.RarityFlags,
                        IsLocked = info.IsLocked
                    };
                    _userCharacters.Add(character);
                }
                else
                {
                    character.Level = info.Level;
                    character.Exp = info.Exp;
                    character.RarityFlags = info.RarityFlags;
                    character.IsLocked = info.IsLocked;
                }
            });

        moriFuncs.UserSyncData.Subscribe(data => { _userSyncData = data; });
    }

    public class UserCharacter
    {
        public string Guid { get; set; }

        public string Name { get; set; }

        public ElementType ElementType { get; set; }

        public long CharacterId { get; set; }

        public long Level { get; set; }

        public long Exp { get; set; }

        public CharacterRarityFlags RarityFlags { get; set; }

        public bool IsLocked { get; set; }
    }

}