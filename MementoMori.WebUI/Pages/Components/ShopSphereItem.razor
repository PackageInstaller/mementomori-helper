@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<MementoMoriFuncs>
@inject IDialogService DialogService

@using MementoMori.Ortega.Share.Master.Data
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Common.Utils
@using MementoMori.Ortega.Share.Data.ApiInterface.TradeShop
@using MementoMori.Ortega.Share.Data.TradeShop
@using System.ComponentModel.DataAnnotations
@using System.Text
<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText>@_itemName</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudSlider Min="1" Max="9" ValueLabel="true" @bind-Value="_buyLv">
            @Masters.TextResourceTable.Get("[EquipmentSphereSynthesisSphereLv]") @_buyLv
        </MudSlider>
        <MudSlider Min="1" Max="MaxBuyCount" ValueLabel="true" @bind-Value="_buyCount">
            @_buyCount
        </MudSlider>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="!BuyBtnEnabled" OnClick="BuySphere">@ConsumeText</MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public SphereMB SphereMb { get; set; }

    [Parameter]
    public TradeShopTabInfo Tab { get; set; }

    private int _buyCount = 1;
    private int _buyLv = 1;
    private string _itemName;

    private int MaxBuyCount
    {
        get
        {
            var tradeShopSphereMb = Masters.TradeShopSphereTable.GetBySphereLevel(_buyLv);
            var count = tradeShopSphereMb.ConsumeItem1.ItemCount;
            var availableCount = ViewModel.UserSyncData.UserItemDtoInfo.FirstOrDefault(d => d.ItemType == tradeShopSphereMb.ConsumeItem1.ItemType && d.ItemId == tradeShopSphereMb.ConsumeItem1.ItemId)?.ItemCount ?? 0;
            var canBuyCount = availableCount / count;
            if (canBuyCount == 0)
            {
                return 0;
            }
            if (tradeShopSphereMb.ConsumeItem2 != null)
            {
                count = tradeShopSphereMb.ConsumeItem2.ItemCount;
                availableCount = ViewModel.UserSyncData.UserItemDtoInfo.FirstOrDefault(d => d.ItemType == tradeShopSphereMb.ConsumeItem2.ItemType && d.ItemId == tradeShopSphereMb.ConsumeItem2.ItemId)?.ItemCount ?? 0;
                canBuyCount = Math.Min(canBuyCount, availableCount / count);
            }
            if (_buyCount > canBuyCount)
            {
                _buyCount = (int) canBuyCount;
            }
            return (int) canBuyCount;
        }
    }

    private bool BuyBtnEnabled
    {
        get
        {
            var tradeShopSphereMb = Masters.TradeShopSphereTable.GetBySphereLevel(_buyLv);
            var count = tradeShopSphereMb.ConsumeItem1.ItemCount;
            var availableCount = ViewModel.UserSyncData.UserItemDtoInfo.FirstOrDefault(d => d.ItemType == tradeShopSphereMb.ConsumeItem1.ItemType && d.ItemId == tradeShopSphereMb.ConsumeItem1.ItemId)?.ItemCount ?? 0;
            if (availableCount < count) return false;
            if (tradeShopSphereMb.ConsumeItem2 != null)
            {
                count = tradeShopSphereMb.ConsumeItem2.ItemCount;
                availableCount = ViewModel.UserSyncData.UserItemDtoInfo.FirstOrDefault(d => d.ItemType == tradeShopSphereMb.ConsumeItem2.ItemType && d.ItemId == tradeShopSphereMb.ConsumeItem2.ItemId)?.ItemCount ?? 0;
                if (availableCount < count) return false;
            }
            return true;
        }
    }

    private string ConsumeText
    {
        get
        {
            var tradeShopSphereMb = Masters.TradeShopSphereTable.GetBySphereLevel(_buyLv);
            var name = ItemUtil.GetItemName(tradeShopSphereMb.ConsumeItem1);
            var count = tradeShopSphereMb.ConsumeItem1.ItemCount * _buyCount;
            var text = $"{name} × {count}";
            if (tradeShopSphereMb.ConsumeItem2 != null)
            {
                name = ItemUtil.GetItemName(tradeShopSphereMb.ConsumeItem2);
                count = tradeShopSphereMb.ConsumeItem2.ItemCount * _buyCount;
                text = $"{text} {name} × {count}";
            }
            return text;
        }
    }

    protected override Task OnInitializedAsync()
    {
        _itemName = Masters.TextResourceTable.Get(SphereMb.NameKey);
        return Task.CompletedTask;
    }

    private async Task BuySphere()
    {
        if (await DialogService.ShowMessageBox(Masters.TextResourceTable.Get("[PurchaseConfirmationMessage]"), $"{Masters.TextResourceTable.Get("[ItemBoxTabConsumption]")} {ConsumeText}") == true)
        {
            var response = await ViewModel.GetResponse<BuyItemRequest, BuyItemResponse>(new BuyItemRequest
            {
                TradeShopTabId = Tab.TradeShopTabId,
                TradeShopSphereId = Masters.SphereTable.GetByCategoryIdAndLevel(SphereMb.CategoryId, _buyLv).Id,
                TradeSphereCount = _buyCount
            });
            await DialogService.ShowMessageBox(Masters.TextResourceTable.Get("[PurchaseConfirmationTitle]"), Masters.TextResourceTable.Get("[ShopDialogResultSucceed]"));
            StateHasChanged();
        }
    }

}