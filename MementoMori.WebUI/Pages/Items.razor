@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<MementoMoriFuncs>
@inject IDialogService DialogService

@page "/Items"
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share.Data.DtoInfo
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data.Item
@using MementoMori.Ortega.Share.Enums
@using MementoMori.WebUI.Extensions
@using MementoMori.Ortega.Common.Utils
@using DynamicData.Binding
@using MementoMori.Ortega.Share.Data.ApiInterface.Item
@using MementoMori.WebUI.Pages.Components
@using ReactiveUI
@using SortDirection = MudBlazor.SortDirection

<PageTitle>储物箱</PageTitle>

<MudTabs MinimumTabWidth="20px">
    <MudTabPanel Text="@Masters.TextResourceTable.Get("[ItemBoxTabEquipment]")">
        <MudTable Dense="true" HorizontalScrollbar="true"
                  Items="@(ViewModel.UserSyncData.UserItemDtoInfo.Where(d => d.ItemType == ItemType.Equipment && d.ItemCount > 0).Select(d => d.ToEquipmentInfo()).Union(ViewModel.UserSyncData.UserEquipmentDtoInfos.Where(d => d.CharacterGuid == "").Select(x => x.ToEquipmentInfo())))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Name)">名称</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.SlotType)">位置</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.RarityFlags)">稀有度</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.EquipmentLv)">等级</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Count)">数量</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.PerformancePoint)">武具固有值</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.BattleParameterChangeInfo.BattleParameterType)">基础属性</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.BattleParameterChangeInfo.Value)">基础属性值</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.EquipmentMb.AdditionalParameterTotal)">附加属性合计</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Info?.AdditionalParameterMuscle)">力量</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Info?.AdditionalParameterEnergy)">魔力</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Info?.AdditionalParameterIntelligence)">战技</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.EquipmentInfo, object>(x => x.Info?.AdditionalParameterHealth)">耐力</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@(Masters.TextResourceTable.Get(context.EquipmentMb.SlotType))</MudTd>
                <MudTd>@(Masters.TextResourceTable.Get(context.EquipmentMb.RarityFlags))</MudTd>
                <MudTd>@context.EquipmentMb.EquipmentLv</MudTd>
                <MudTd>@context.Count</MudTd>
                <MudTd>@context.EquipmentMb.PerformancePoint</MudTd>
                <MudTd>@(Masters.TextResourceTable.Get(context.EquipmentMb.BattleParameterChangeInfo.BattleParameterType))</MudTd>
                <MudTd>@(ParameterUtil.GetBaseParameterValueText(context.EquipmentMb.BattleParameterChangeInfo.ChangeParameterType, context.EquipmentMb.BattleParameterChangeInfo.Value))</MudTd>
                <MudTd>@context.EquipmentMb.AdditionalParameterTotal</MudTd>
                <MudTd>@context.Info?.AdditionalParameterMuscle</MudTd>
                <MudTd>@context.Info?.AdditionalParameterEnergy</MudTd>
                <MudTd>@context.Info?.AdditionalParameterIntelligence</MudTd>
                <MudTd>@context.Info?.AdditionalParameterHealth</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="@Masters.TextResourceTable.Get("[ItemBoxTabConsumption]")">
        @{ var types = new HashSet<ItemType>()
           {
               ItemType.QuestQuickTicket,
               ItemType.TreasureChestKey,
               ItemType.TreasureChest,
               ItemType.CharacterFragment
           }; }
        <MudTable Dense="true" HorizontalScrollbar="true"
                  Items="@(ViewModel.UserSyncData.UserItemDtoInfo.Where(d => types.Contains(d.ItemType) && d.ItemCount > 0).Select(d => d.ToUserItemInfo()).OrderBy(d=>d.Item.ItemType).ThenByDescending(d=>d.ItemRarityFlags))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Name)">名称</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    操作
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.ItemRarityFlags)">稀有度</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.MaxItemCount)">持有上限</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Count)">数量</MudTableSortLabel>
                </MudTh>
                <MudTh>描述</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>
                    @if (context.Item.ItemType == ItemType.QuestQuickTicket)
                    {
                        <MudButton OnClick="() => UseAutoBattleRewardItem(context.Name, context.Item)">使用</MudButton>
                    }
                </MudTd>
                <MudTd>@(context.ItemRarityFlags)</MudTd>
                <MudTd>@(context.MaxItemCount)</MudTd>
                <MudTd>@context.Count</MudTd>
                <MudTd>@context.Description</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="@Masters.TextResourceTable.Get("[ItemBoxTabMaterial]")">
        @{ var types = new HashSet<ItemType>()
           {
               ItemType.CharacterTrainingMaterial,
               ItemType.EquipmentReinforcementItem,
               ItemType.MatchlessSacredTreasureExpItem,
               ItemType.GachaTicket,
               ItemType.BossChallengeTicket,
               ItemType.TowerBattleTicket,
               ItemType.DungeonRecoveryItem,
               ItemType.FriendPoint,
               ItemType.EquipmentRarityCrystal,
               ItemType.ExchangePlaceItem,
               ItemType.EventExchangePlaceItem,
               ItemType.EquipmentSetMaterial
           }; }
        <MudTable Dense="true" HorizontalScrollbar="true"
                  Items="@(ViewModel.UserSyncData.UserItemDtoInfo.Where(d => types.Contains(d.ItemType) && d.ItemCount > 0).Select(d => d.ToUserItemInfo()))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Name)">名称</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.ItemRarityFlags)">稀有度</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.MaxItemCount)">持有上限</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Count)">数量</MudTableSortLabel>
                </MudTh>
                <MudTh>描述</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@(context.ItemRarityFlags)</MudTd>
                <MudTd>@(context.MaxItemCount)</MudTd>
                <MudTd>@context.Count</MudTd>
                <MudTd>@context.Description</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="@Masters.TextResourceTable.Get("[ItemBoxTabSphere]")">
        @{ var types = new HashSet<ItemType>()
           {
               ItemType.Sphere
           }; }
        <MudTable Dense="true" HorizontalScrollbar="true"
                  Items="@(ViewModel.UserSyncData.UserItemDtoInfo.Where(d => types.Contains(d.ItemType) && d.ItemCount > 0).Select(d => d.ToSphereInfo()))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.Name)">名称</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.RarityFlags)">稀有度</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.Lv)">等级</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.BaseParameterChangeInfo?.BaseParameterType)">基础属性</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.BaseParameterChangeInfo?.Value)">基础属性值</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.BattleParameterChangeInfo?.BattleParameterType)">战斗属性</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.SphereMB.BattleParameterChangeInfo?.Value)">战斗属性值</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.SphereInfo, object>(x => x.Count)">数量</MudTableSortLabel>
                </MudTh>
                <MudTh>描述</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@(context.SphereMB.RarityFlags)</MudTd>
                <MudTd>@(context.SphereMB.Lv)</MudTd>
                <MudTd>@(context.SphereMB.BaseParameterChangeInfo == null ? "" : Masters.TextResourceTable.Get(context.SphereMB.BaseParameterChangeInfo.BaseParameterType))</MudTd>
                <MudTd>@(context.SphereMB.BaseParameterChangeInfo == null ? "" : ParameterUtil.GetBaseParameterValueText(context.SphereMB.BaseParameterChangeInfo.ChangeParameterType, context.SphereMB.BaseParameterChangeInfo.Value))</MudTd>
                <MudTd>@(context.SphereMB.BattleParameterChangeInfo == null ? "" : Masters.TextResourceTable.Get(context.SphereMB.BattleParameterChangeInfo.BattleParameterType))</MudTd>
                <MudTd>@(context.SphereMB.BattleParameterChangeInfo == null ? "" : ParameterUtil.GetBaseParameterValueText(context.SphereMB.BattleParameterChangeInfo.ChangeParameterType, context.SphereMB.BattleParameterChangeInfo.Value))</MudTd>
                <MudTd>@context.Count</MudTd>
                <MudTd>@context.Description</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="@Masters.TextResourceTable.Get("[ItemBoxTabSetPiece]")">
        @{ var types = new HashSet<ItemType>()
           {
               ItemType.EquipmentFragment
           }; }
        <MudTable Dense="true" HorizontalScrollbar="true"
                  Items="@(ViewModel.UserSyncData.UserItemDtoInfo.Where(d => types.Contains(d.ItemType) && d.ItemCount > 0).Select(d => d.ToUserItemInfo()))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Name)">名称</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.ItemRarityFlags)">稀有度</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.MaxItemCount)">持有上限</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<UserItemExtensions.UserItemInfo, object>(x => x.Count)">数量</MudTableSortLabel>
                </MudTh>
                <MudTh>描述</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@(context.ItemRarityFlags)</MudTd>
                <MudTd>@(context.MaxItemCount)</MudTd>
                <MudTd>@context.Count</MudTd>
                <MudTd>@context.Description</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
</MudTabs>

@code {

    protected override async Task OnInitializedAsync()
    {
        this.ViewModel.WhenAnyPropertyChanged().Subscribe(_ => InvokeAsync(StateHasChanged));
    }

    private void SelectItem(UserItemDtoInfo item)
    {
    }

    private void UseAutoBattleRewardItem(string name, IUserItem userItem)
    {
        if (userItem.ItemType != ItemType.QuestQuickTicket)
        {
            return;
        }
        var dialogParameters = new DialogParameters<UseItemDialog>();
        dialogParameters.Add(d=>d.Count, userItem.ItemCount);
        dialogParameters.Add(d=>d.Name, name);
        dialogParameters.Add(d=>d.ItemId, userItem.ItemId);
        dialogParameters.Add(d=>d.UseItemFunc, (async count =>
        {
            var useAutoBattleRewardItemResponse = await ViewModel.GetResponse<UseAutoBattleRewardItemRequest, UseAutoBattleRewardItemResponse>(
                new UseAutoBattleRewardItemRequest() {ItemType = (QuestQuickTicketType) userItem.ItemId, UseCount = (int)count});
            return useAutoBattleRewardItemResponse.RewardItemList.Cast<IUserItem>().ToList();
        }));

        DialogService.Show<UseItemDialog>("使用物品", dialogParameters);
    }

    
}