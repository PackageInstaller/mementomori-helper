@inject IJSRuntime JsRuntime
@inject MementoMoriFuncs moriFuncs

@page "/"
@using System.Text
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share.Data.ApiInterface.Battle
@using MementoMori.Ortega.Share.Data.ApiInterface.BountyQuest
@using MementoMori.Ortega.Share.Data.ApiInterface.Quest
@using MementoMori.Ortega.Share.Data.Battle.Result
@using MementoMori.Ortega.Share.Data.Item
@using MementoMori.Ortega.Share.Data.Present
@using MementoMori.Ortega.Share.Enums
@using MementoMori.WebUI.Extensions
@using StartRequest = MementoMori.Ortega.Share.Data.ApiInterface.TowerBattle.StartRequest
@using StartResponse = MementoMori.Ortega.Share.Data.ApiInterface.TowerBattle.StartResponse

<PageTitle>主页</PageTitle>

<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                <span class="fs-4">角色信息</span>
                <button class="btn btn-sm btn-secondary float-end" disabled="@_logining" @onclick="@Login">
                    登录
                    @if (_logining)
                    {
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                    }
                </button>
            </div>
            <div class="card-body">
                <table class="table">
                    <tbody>
                    <tr>
                        <td>用户名</td><td>@_userSyncData?.UserStatusDtoInfo?.Name</td>
                    </tr>
                    <tr>
                        <td>玩家ID</td><td>@_userSyncData?.UserStatusDtoInfo?.PlayerId</td>
                    </tr>
                    <tr>
                        <td>加入时间</td><td>@_userSyncData?.UserStatusDtoInfo?.CreateAt.ToDateTimeOffset()</td>
                    </tr>
                    <tr>
                        <td>等级</td><td>@_userSyncData?.UserStatusDtoInfo?.Rank</td>
                    </tr>
                    <tr>
                        <td>VIP 等级</td><td>@_userSyncData?.UserStatusDtoInfo?.Vip</td>
                    </tr>
                    <tr>
                        <td>留言</td><td>@_userSyncData?.UserStatusDtoInfo?.Comment</td>
                    </tr>
                    <tr>
                        <td>经验值</td><td>@_userSyncData?.UserStatusDtoInfo?.Exp</td>
                    </tr>
                    <tr>
                        <td>上次登录</td><td>@_userSyncData?.UserStatusDtoInfo?.LastLoginTime.ToDateTimeOffset()</td>
                    </tr>
                    <tr>
                        <td>前次登录</td><td>@_userSyncData?.UserStatusDtoInfo?.PreviousLoginTime.ToDateTimeOffset()</td>
                    </tr>
                    <tr>
                        <td>上次升级</td><td>@_userSyncData?.UserStatusDtoInfo?.LastLvUpTime.ToDateTimeOffset()</td>
                    </tr>
                    <tr>
                        <td>用户名已更改</td><td>@_userSyncData?.UserStatusDtoInfo?.IsAlreadyChangedName</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-4">
        <div class="card">
            <div class="card-header">快捷操作</div>
            <div class="card-body">
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@GetLoginBonus">领取每日登录奖励</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@GetVipGift">领取每日VIP礼物</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@GetAutoBattleReward">领取自动战斗奖励</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@BulkTransferFriendPoint">一键赠送/接受友情点</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@PresentReceiveItem">一键领取礼物箱</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@BattleBossQuick">主线boss扫荡3次</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@InfiniteTowerQuick">无穷之塔扫荡3次</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@PvpAuto">PVP自动战斗5次</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@BountyQuestRewardAuto">祈愿之泉一键领取</button>
                <button class="btn btn-sm btn-primary mb-1" disabled="@_isQuickActionExecuting" @onclick="@BountyQuestStartAuto">祈愿之泉一键开始</button>
            </div>
        </div>
        <div class="card">
            <div class="card-header">执行结果</div>
            <div class="card-body">
                <pre>
                @_quickActionResult
</pre>
            </div>
        </div>
    </div>

    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <pre>
        @_runtimeInfo.ToJson(true)
        </pre>
            </div>
        </div>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <pre>
        @_userSyncData.ToJson(true)
        </pre>
            </div>
        </div>
    </div>
</div>

@code {
    private RuntimeInfo _runtimeInfo;
    private UserSyncData? _userSyncData;

    private bool _logining;
    private bool _isQuickActionExecuting;
    private string _quickActionResult;

    protected override async Task OnInitializedAsync()
    {
        moriFuncs.RuntimeInfoSubject.Subscribe(c =>
        {
            InvokeAsync(() =>
            {
                _runtimeInfo = c;
                StateHasChanged();
            });
        });
        moriFuncs.UserSyncData.Subscribe(data => { _userSyncData = data; });
    }


    private async Task Login()
    {
        _logining = true;
        await moriFuncs.AuthLogin();
        var userData = await moriFuncs.UserGetUserData();
        _logining = false;
    }

    private async Task ExecuteQuickAction(Func<Task> func)
    {
        _isQuickActionExecuting = true;
        await func();
        _isQuickActionExecuting = false;
        StateHasChanged();
    }

    private async Task GetLoginBonus()
    {
        await ExecuteQuickAction(async () =>
        {
            var bonus = await moriFuncs.LoginBonusReceiveDailyLoginBonus(DateTime.Now.Day);
            var msg = new StringBuilder("领取的奖励：\n");

            foreach (var item in bonus.RewardItemList ?? new List<UserItem>())
            {
                msg.Append($"Item Type: {item.ItemType}, Item Id: {item.ItemId}, Item Count: {item.ItemCount}\n");
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task GetVipGift()
    {
        await ExecuteQuickAction(async () =>
        {
            var bonus = await moriFuncs.VipGetDailyGift();
            var msg = new StringBuilder("领取的奖励：\n");

            foreach (var item in bonus.ItemList ?? new List<UserItem>())
            {
                msg.Append($"Item Type: {item.ItemType}, Item Id: {item.ItemId}, Item Count: {item.ItemCount}\n");
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task GetAutoBattleReward()
    {
        await ExecuteQuickAction(async () =>
        {
            var bonus = await moriFuncs.BattleRewardAutoBattle();
            var msg = new StringBuilder("领取的奖励：\n");

            msg.AppendLine($"战斗次数 {bonus.AutoBattleRewardResult.BattleCountAll}");
            msg.AppendLine($"胜利次数 {bonus.AutoBattleRewardResult.BattleCountWin}");
            msg.AppendLine($"总时间 {TimeSpan.FromMilliseconds(bonus.AutoBattleRewardResult.BattleTotalTime)}");
            msg.AppendLine($"领民金币 {bonus.AutoBattleRewardResult.GoldByPopulation}");
            msg.AppendLine($"领民潜能珠宝 {bonus.AutoBattleRewardResult.PotentialJewelByPopulation}");

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BulkTransferFriendPoint()
    {
        await ExecuteQuickAction(async () =>
        {
            var resp = await moriFuncs.FriendBulkTransferFriendPoint();
            _quickActionResult = "成功";
        });
    }

    private async Task PresentReceiveItem()
    {
        await ExecuteQuickAction(async () =>
        {
            var resp = await moriFuncs.PresentReceiveItem();
            var msg = new StringBuilder("领取的奖励：\n");
            foreach (var respResultItem in resp.ResultItems ?? new List<PresentItem>())
            {
                msg.AppendLine($"稀有度 {respResultItem.RarityFlags} {respResultItem.Item.ToJson()}\n");
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BattleBossQuick()
    {
        await ExecuteQuickAction(async () =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            for (int i = 0; i < 3; i++)
            {
                var bossQuickResponse = await moriFuncs.GetResponse<BossQuickRequest, BossQuickResponse>(
                    new BossQuickRequest()
                    {
                        QuestId = _userSyncData.UserBattleBossDtoInfo.BossClearMaxQuestId
                    });
                if (bossQuickResponse.BattleRewardResult == null) continue;
                foreach (var userItem in bossQuickResponse.BattleRewardResult.FixedItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
                foreach (var userItem in bossQuickResponse.BattleRewardResult.DropItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task InfiniteTowerQuick()
    {
        await ExecuteQuickAction(async () =>
        {
            var tower = _userSyncData.UserTowerBattleDtoInfos.First(d => d.TowerType == TowerType.Infinite);
            var msg = new StringBuilder("领取的奖励：\n");
            for (int i = 0; i < 3; i++)
            {
                var bossQuickResponse = await moriFuncs.GetResponse<StartRequest, StartResponse>(
                    new StartRequest()
                    {
                        IsQuick = true, TargetTowerType = TowerType.Infinite, TowerBattleQuestId = tower.MaxTowerBattleId
                    });
                if (bossQuickResponse.BattleRewardResult == null) continue;
                foreach (var userItem in bossQuickResponse.BattleRewardResult.FixedItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
                foreach (var userItem in bossQuickResponse.BattleRewardResult.DropItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task PvpAuto()
    {
        await ExecuteQuickAction(async () =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            for (int i = 0; i < 5; i++)
            {
                var pvpInfoResponse = await moriFuncs.GetResponse<GetPvpInfoRequest, GetPvpInfoResponse>(
                    new GetPvpInfoRequest());

                var pvpRankingPlayerInfo = pvpInfoResponse.MatchingRivalList.OrderBy(d => d.DefenseBattlePower).First();

                var pvpStartResponse = await moriFuncs.GetResponse<PvpStartRequest, PvpStartResponse>(new PvpStartRequest()
                {
                    RivalPlayerRank = pvpRankingPlayerInfo.CurrentRank,
                    RivalPlayerId = pvpRankingPlayerInfo.PlayerInfo.PlayerId
                });

                foreach (var userItem in pvpStartResponse.BattleRewardResult.FixedItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
                foreach (var userItem in pvpStartResponse.BattleRewardResult.DropItemList)
                {
                    msg.AppendLine($"ItemType: {userItem.ItemType}, ItemId: {userItem.ItemId}, Count: {userItem.ItemCount}\n");
                }
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BountyQuestRewardAuto()
    {
        await ExecuteQuickAction(async () =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            var getListResponse = await moriFuncs.GetResponse<GetListRequest, GetListResponse>(
                new GetListRequest());

            var questIds = getListResponse.UserBountyQuestDtoInfos
                .Where(d=>d.BountyQuestEndTime > 0)
                .Select(d=>d.BountyQuestId).ToList();

            if (questIds.Count > 0)
            {
                var rewardResponse = await moriFuncs.GetResponse<RewardRequest, RewardResponse>(new RewardRequest(){BountyQuestIds = questIds, IsQuick = false});

                foreach (var item in rewardResponse.RewardItems)
                {
                    msg.AppendLine($"ItemType: {item.ItemType}, ItemId: {item.ItemId}, Count: {item.ItemCount}\n");
                }
            }
           
            _quickActionResult = msg.ToString();
        });
    }
    private async Task BountyQuestStartAuto()
    {
        await ExecuteQuickAction(async () =>
        {
            _quickActionResult = "还未实现";
            // var msg = new StringBuilder();
            // var getListResponse = await moriFuncs.GetResponse<GetListRequest, GetListResponse>(
            //     new GetListRequest());

            
            // foreach (var bountyQuestInfo in getListResponse.BountyQuestInfos)
            // {
            //     foreach (var userCharacterDtoInfo in _userSyncData.UserCharacterDtoInfos)
            //     {
            //     }
            // }
           
           
            // _quickActionResult = msg.ToString();
        });
    }


}