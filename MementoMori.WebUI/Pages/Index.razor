@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject IWritableOptions<GameConfig> GameConfig
@inject TimeManager TimeManager

@page "/"
@inherits ReactiveUI.Blazor.ReactiveInjectableComponentBase<MementoMoriFuncs>
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share.Enums
@using MementoMori.WebUI.Extensions
@using MementoMori.WebUI.Models
@using MementoMori.WebUI.Pages.Components
@using ReactiveUI
@using DynamicData.Binding
@using MementoMori.Ortega.Common.Utils
@using MementoMori.Ortega.Share.Data.Auth
@using MementoMori.Ortega.Share.Data.DtoInfo
@using MementoMori.Ortega.Share.Data.MyPage
@using MementoMori.Ortega.Share.Data.Notice
@using MementoMori.Common.Localization
@using MementoMori.Option
@using Microsoft.Extensions.Options
@using static MementoMori.Ortega.Share.Masters

<PageTitle>主页</PageTitle>

<MudGrid>
@if (!ViewModel.LoginOk)
{
    <MudItem md="12">
        <MudAlert Severity="Severity.Warning">@ResourceStrings.PleaseLogin</MudAlert>
    </MudItem>
}
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudCard>
        <MudCardHeader Class="justify-space-between">
            <MudText>@ResourceStrings.CharacterInfo</MudText>
            <MudPaper Elevation="0" Class="d-flex justify-end gap-2">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="ViewModel.Logining" @onclick="ShowPlayerList">
                    @ResourceStrings.Login
                    @if (ViewModel.Logining)
                    {
                        <MudProgressCircular Size="Size.Small"/>
                    }
                </MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="ViewModel.Logining" @onclick="ViewModel.SyncUserData">@ResourceStrings.SyncUserInfo</MudButton>
            </MudPaper>
        </MudCardHeader>
        <MudCardContent>
            <MudSimpleTable Elevation="0" Dense="true">
                <tbody>
                <tr>
                    <td>@TextResourceTable.Get("[CommonPlayerNameFormat]", ViewModel.UserSyncData?.UserStatusDtoInfo?.Name)</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[PlayerId]") : @ViewModel.UserSyncData?.UserStatusDtoInfo?.PlayerId</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[ItemName9]") : @(ViewModel.UserSyncData?.UserItemDtoInfo?.FirstOrDefault(d => d.ItemType == ItemType.FriendPoint)?.ItemCount ?? 0)</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[CommonPlayerRankLabel]") : @ViewModel.UserSyncData?.UserStatusDtoInfo?.Rank</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[CommonVipWithSpaceFormat]", ViewModel.UserSyncData?.UserStatusDtoInfo?.Vip)</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[MyPagePlayerInformationCommentLabel]") : @ViewModel.UserSyncData?.UserStatusDtoInfo?.Comment</td>
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[ItemName11]") : @(ViewModel.UserSyncData?.UserItemDtoInfo?.FirstOrDefault(d => d.ItemType == ItemType.CharacterTrainingMaterial && d.ItemId == 2)?.ItemCount ?? 0)</td>
                </tr>
                <tr>
                    @{
                        var free = ViewModel.UserSyncData?.UserItemDtoInfo?.FirstOrDefault(x => x.ItemType == ItemType.CurrencyFree)?.ItemCount ?? 0;
                        var paid = ViewModel.UserSyncData?.UserItemDtoInfo?.FirstOrDefault(x => x.ItemType == ItemType.CurrencyPaid)?.ItemCount ?? 0;
                        <td>@TextResourceTable.Get("[ItemName4]") : @($"{free + paid}, {TextResourceTable.Get("[CurrencyDetailCurrencyFree]")} {free}, {TextResourceTable.Get("[CurrencyDetailCurrencyPaid]")} {paid}") </td>
                    }
                </tr>
                <tr>
                    <td>@TextResourceTable.Get("[ItemName5]") : @((ViewModel.UserSyncData?.UserItemDtoInfo?.FirstOrDefault(x => x.ItemType == ItemType.Gold)?.ItemCount ?? 0).ToString("N0"))</td>
                </tr>
                </tbody>
            </MudSimpleTable>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudPaper Class="pa-4">
        <MudPaper Elevation="0" Class="d-flex">
            <MudText>@TextResourceTable.Get("[CommonFooterHomeButtonLabel]")</MudText>
            <MudSpacer/>
            <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="ViewModel.GetMyPage" StartIcon="@Icons.Material.Filled.Sync">@ResourceStrings.Sync</MudButton>
        </MudPaper>
        <MudPaper Elevation="0">
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@(ViewModel.Mypage?.ExistNewFriendPointTransfer ?? false)">
                <MudChip>@TextResourceTable.Get("[ItemName9]")</MudChip>
            </MudBadge>
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@(ViewModel.Mypage?.ExistNewPrivateChat ?? false)">
                <MudChip>@TextResourceTable.Get("[CommonHeaderChatLabel]")</MudChip>
            </MudBadge>
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@(ViewModel.Mypage?.ExistNotReceivedBountyQuestReward ?? false)">
                <MudChip>@TextResourceTable.Get("[CommonHeaderBountyQuestLabel]")</MudChip>
            </MudBadge>
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@(ViewModel.Mypage?.ExistNotReceivedMissionReward ?? false)">
                <MudChip>@TextResourceTable.Get("[MyPageMenuButtonMissionLabel]")</MudChip>
            </MudBadge>
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@ViewModel.IsNotClearDungeonBattleMap">
                <MudChip>@TextResourceTable.Get("[CommonHeaderDungeonBattleLabel]")</MudChip>
            </MudBadge>
            <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@(ViewModel.UserSyncData?.PresentCount > 0)">
                <MudChip>@TextResourceTable.Get("[MyPageMenuButtonPresentBoxLabel]")</MudChip>
            </MudBadge>
            @foreach (var info in ViewModel.Mypage?.MypageInfo?.MypageIconInfos ?? new List<MypageIconInfo>())
            {
                var name = TextResourceTable.Get(info.IconNameKey);
                <MudBadge Overlap="true" Bordered="true" Color="Color.Info" Visible="@info.IsDisplayBadge">
                    <MudChip>@((MarkupString) name)</MudChip>
                </MudBadge>
            }
        </MudPaper>
        <MudDivider Class="my-2"/>
        <MudPaper Elevation="0" Class="d-flex">
            <MudText>@TextResourceTable.Get("[CommonHeaderBountyQuestLabel]")</MudText>
            <MudSpacer/>
            @if (GameConfig.Value.BountyQuestAuto.TargetItems.Count > 0)
            {
                <MudSwitch T="bool" Color="Color.Info" @bind-Checked="@ViewModel.BountyRequestForceAll" Label="@ResourceStrings.ForceDispatch"></MudSwitch>
            }
            <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="ViewModel.RemakeBountyRequest"
                       StartIcon="@Icons.Material.Filled.Refresh">
                @TextResourceTable.Get("[BountyQuestUpdate]") (@TextResourceTable.Get("[CommonAlternativesItemFormat]", TextResourceTable.Get("[CommonCurrencyName]"), 20))
            </MudButton>
            <MudButton Class="ml-2" Variant="Variant.Filled" Size="Size.Small" @onclick="ViewModel.GetBountyRequestInfo" StartIcon="@Icons.Material.Filled.Sync">@ResourceStrings.Sync</MudButton>
        </MudPaper>
        <MudPaper Elevation="0">
            @foreach (var info in ViewModel.BountyQuestResponseInfo?.UserBountyQuestDtoInfos ?? new List<UserBountyQuestDtoInfo>())
            {
                var bountyQuestInfo = ViewModel.BountyQuestResponseInfo.BountyQuestInfos.First(d => d.BountyQuestId == info.BountyQuestId);
                var name = TextResourceTable.Get(bountyQuestInfo.BountyQuestNameKey);
                var rarityName = TextResourceTable.Get(bountyQuestInfo.BountyQuestRarity);
                var itemNames = bountyQuestInfo.BountyQuestType == BountyQuestType.Guerrilla
                    ? TextResourceTable.Get("[ItemRewardDetailDialogLotteryRateLabel]")
                    : string.Join(",", bountyQuestInfo.RewardItems.Select(d => $"{ItemUtil.GetItemName(d)}×{d.ItemCount}"));
                var status = ResourceStrings.NotStarted;
                if (info.BountyQuestEndTime > 0)
                {
                    var nowMilli = DateTimeOffset.Now.Add(TimeManager.DiffFromUtc).ToUnixTimeMilliseconds();
                    if (nowMilli < info.BountyQuestEndTime)
                    {
                        status = ResourceStrings.OnGoing + " " + TimeSpan.FromMilliseconds(info.BountyQuestEndTime - nowMilli).ToString(@"hh\:mm\:ss");
                    }
                    else if (!info.IsReward)
                    {
                        status = ResourceStrings.NotReceived + TimeSpan.FromMilliseconds(info.RewardEndTime - nowMilli).ToString(@"hh\:mm\:ss");
                    }
                    else
                    {
                        status = ResourceStrings.Received;
                    }
                }
                <MudChip>@rarityName @itemNames @status</MudChip>
            }
        </MudPaper>
    </MudPaper>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudCard>
        <MudCardHeader Class="justify-space-between">
            <MudText>@TextResourceTable.Get("[MyPageMenuButtonMissionLabel]")</MudText>
            <MudPaper Elevation="0" Class="d-flex justify-end gap-2">
                <MudButton Size="Size.Small" Variant="Variant.Filled" @onclick="@ViewModel.GetMissionInfo">@ResourceStrings.Sync</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Filled" @onclick="@ViewModel.CompleteMissions">@TextResourceTable.Get("[MissionAllReceiveButton]")</MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Filled" @onclick="@ViewModel.RewardMissonActivity">@ResourceStrings.RewardMissonActivity</MudButton>
            </MudPaper>
        </MudCardHeader>
        <MudCardContent>
            <MudSimpleTable Elevation="0" Dense="true" Style="height: 400px; overflow: auto">
                <tbody>
                @foreach (var missionInfo in ViewModel?.MissionInfoDict?.Values.SelectMany(d => d.UserMissionDtoInfoDict?.Values.SelectMany(x => x) ?? Array.Empty<UserMissionDtoInfo>()) ?? Array.Empty<UserMissionDtoInfo>())
                {
                    @if (missionInfo.MissionStatusHistory[MissionStatusType.Progress].Any())
                    {
                        var missionId = missionInfo.MissionStatusHistory[MissionStatusType.Progress].Last();
                        var missionMb = MissionTable.GetById(missionId);
                        var name = TextResourceTable.Get(missionMb.NameKey);
                        var info = $"{missionInfo.ProgressCount}/{missionMb.RequireValue}";

                        <tr>
                            <td>@missionInfo.MissionType</td>
                            <td>@name</td>
                            <td>@info</td>
                        </tr>
                    }
                    else if (missionInfo.MissionStatusHistory[MissionStatusType.NotReceived].Any())
                    {
                        var missionId = missionInfo.MissionStatusHistory[MissionStatusType.NotReceived].Last();
                        var missionMb = MissionTable.GetById(missionId);
                        var name = TextResourceTable.Get(missionMb.NameKey);

                        <tr>
                            <td>@missionInfo.MissionType</td>
                            <td>@name</td>
                            <td>@ResourceStrings.NotReceived</td>
                        </tr>
                    }
                    else if (missionInfo.MissionStatusHistory[MissionStatusType.Locked].Any())
                    {
                        var missionId = missionInfo.MissionStatusHistory[MissionStatusType.Locked].Last();
                        var missionMb = MissionTable.GetById(missionId);
                        var name = TextResourceTable.Get(missionMb.NameKey);

                        <tr>
                            <td>@missionInfo.MissionType</td>
                            <td>@name</td>
                            <td>@ResourceStrings.NotUnlocked</td>
                        </tr>
                    }
                    else if (missionInfo.MissionType == MissionType.Daily || missionInfo.MissionType == MissionType.Weekly)
                    {
                        var missionId = missionInfo.MissionStatusHistory[MissionStatusType.Received].Last();
                        var missionMb = MissionTable.GetById(missionId);
                        var name = TextResourceTable.Get(missionMb.NameKey);
                        <tr>
                            <td>@missionInfo.MissionType</td>
                            <td>@name</td>
                            <td>@ResourceStrings.Finished</td>
                        </tr>
                    }
                }
                </tbody>
            </MudSimpleTable>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudCard>
        <MudCardHeader Class="">
            <MudText>@ResourceStrings.QuickActions</MudText>
            <MudSpacer/>
            <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="ViewModel.IsQuickActionExecuting" @onclick="ViewModel.ExecuteAllQuickAction">@ResourceStrings.ExecuteAllQuick</MudButton>
            <MudButton Class="ml-2" Size="Size.Small" Variant="Variant.Filled" Disabled="!ViewModel.IsQuickActionExecuting" @onclick="ViewModel.CancelQuickAction">@TextResourceTable.Get("[CommonCancelLabel]")</MudButton>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs Position="Position.Left" MinimumTabWidth="20px">
                <MudTabPanel Text="@ResourceStrings.ExecuteAllQuick">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.GetLoginBonus">@TextResourceTable.Get("[MyPageButtonLoginBonusLabel]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.GetVipGift">@TextResourceTable.Get("[VipDailyRewardLabelFormat]", ViewModel.UserSyncData?.UserStatusDtoInfo?.Vip)</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.ReceiveMonthlyBoost">@TextResourceTable.Get("[CommonMonthlyBoosterLabel]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.GetAutoBattleReward">@TextResourceTable.Get("[AutoBattleRewardInfoRewardLabel]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.BulkTransferFriendPoint">@TextResourceTable.Get("[ItemName9]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.PresentReceiveItem">@TextResourceTable.Get("[MyPagePresentBoxButtonTitle]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.ReinforcementEquipmentOneTime">@ResourceStrings.ReinforceEquipmentOnce</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.BattleBossQuick">@TextResourceTable.Get("[BattleTypeBoss]") @TextResourceTable.Get("[GuildRaidMultipleCleanup]", 3)</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.InfiniteTowerQuick">@TextResourceTable.Get("[CommonHeaderTowerBattleLabel]") @TextResourceTable.Get("[GuildRaidMultipleCleanup]", 3)</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.PvpAuto">@TextResourceTable.Get("[CommonHeaderLocalPvpLabel]") @TextResourceTable.Get("[BattleTypeAuto]") @TextResourceTable.Get("[CommonTimesFormat]", 5)</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.BossHishSpeedBattle">@TextResourceTable.Get("[GachaFree]") @TextResourceTable.Get("[AutoBattleButtonQuickForward]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.FreeGacha">@TextResourceTable.Get("[GachaFree]") @TextResourceTable.Get("[CommonFooterGachaButtonLabel]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.GuildCheckin">@TextResourceTable.Get("[MissionName533]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.GuildRaid">@TextResourceTable.Get("[CommonHeaderGuildRaidLabel]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.OpenGuildRaid">@TextResourceTable.Get("[GuildRaidReleaseConfirmTitle]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.ReceiveGvgReward">@($"{TextResourceTable.Get("[CommonHeaderGvgLabel]")} {TextResourceTable.Get("[GuildRewardTitle]")}")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.BountyQuestRewardAuto">@TextResourceTable.Get("[CommonHeaderBountyQuestLabel]") @TextResourceTable.Get("[CommonClaimAll]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.BountyQuestStartAuto">@TextResourceTable.Get("[CommonHeaderBountyQuestLabel]") @TextResourceTable.Get("[BountyQuestAutoPlacement]")</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoBuyShopItem">@ResourceStrings.ShopAutoBuyItems</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoUseItems">@ResourceStrings.UseNormalItems</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoRankUpCharacter">@TextResourceTable.Get("[CharacterRankUpBulkButton]")</MudButton>
                        @* <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.UseFriendCode">邀请码</MudButton> *@
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[ItemBoxButtonBulkCasting]")">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoEquipmentMatchlessInheritance">@ResourceStrings.AutoMatchlessInheritance</MudButton>
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoEquipmentLegendInheritance">@ResourceStrings.AutoLegendInheritance</MudButton>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[PlayerRankingTypeStage]")">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoBossRequest">@TextResourceTable.Get("[BattleTypeBoss]") @TextResourceTable.Get("[BattleTypeAuto]")</MudButton>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[CommonHeaderDungeonBattleLabel]")">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoDungeonBattle">@TextResourceTable.Get("[CommonHeaderDungeonBattleLabel]") @TextResourceTable.Get("[BattleTypeAuto]")</MudButton>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[CommonHeaderTowerBattleLabel]")">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudSelect T="TowerType" Label="@ResourceStrings.TowerType" Variant="Variant.Filled" @bind-Value="@ViewModel.SelectedAutoTowerType">
                            @foreach (var type in ViewModel.GetAvailableTower())
                            {
                                <MudSelectItem T="TowerType" Value="@type">@(TextResourceTable.Get(type))</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoInfiniteTowerRequest">@TextResourceTable.Get("[CommonHeaderTowerBattleLabel]") @TextResourceTable.Get("[BattleTypeAuto]")</MudButton>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[CommonForgedLabel]")">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudSelect T="string" Label="@TextResourceTable.Get("[CommonEquipmentLabel]")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@ViewModel.EquipmentId">
                            @foreach (var e in _characterEquipments)
                            {
                                <MudSelectItem T="string" Value="e.EquipmentGuid">@($"{e.EquipmentName}/{e.UserEquipmentDtoInfo.ReinforcementLv} {e.CharacterName}")</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="string" @bind-Value="@ViewModel.EquipmentTrainingTargetType" Label="@TextResourceTable.Get("[CommonBaseParameterLabel]")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem T="string" Value="@("Health")">@TextResourceTable.Get(BaseParameterType.Health)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Intelligence")">@TextResourceTable.Get(BaseParameterType.Intelligence)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Muscle")">@TextResourceTable.Get(BaseParameterType.Muscle)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Energy")">@TextResourceTable.Get(BaseParameterType.Energy)</MudSelectItem>
                        </MudSelect>
                        <MudTextField T="long" @bind-Value="@ViewModel.EquipmentTrainingTargetValue" Label="@ResourceStrings.TargetValue" Variant="Variant.Text"></MudTextField>
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.AutoEquipmentTraning">@TextResourceTable.Get("[CommonForgedLabel]")</MudButton>
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Text="Debug">
                    <MudPaper Elevation="0" Class="pa-2">
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.Debug">Debug</MudButton>
                        <MudButton Variant="Variant.Filled" Disabled="@ViewModel.IsQuickActionExecuting" @onclick="@ViewModel.LogDebug">LogTest</MudButton>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudCard>
        <MudCardHeader>@ResourceStrings.ExecutionOutput</MudCardHeader>
        <MudCardContent>
            <MessageList Messages="@ViewModel.MesssageList"/>
        </MudCardContent>
    </MudCard>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudPaper>
        <MudTabs HeaderPosition="TabHeaderPosition.After" MinimumTabWidth="20px">
            <Header>
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                    <MudSpacer/>
                    <MudButton Size="Size.Small" Variant="Variant.Filled" @onclick="@ViewModel.GetNoticeInfoList">@ResourceStrings.Sync</MudButton>
                </MudStack>
            </Header>
            <ChildContent>
                <MudTabPanel Text="@TextResourceTable.Get("[NoticeCategoryTypeEventTab]")">
                    <MudTable Elevation="0" T="NoticeInfo" Items="@ViewModel.EventInfoList" Virtualize="true" Dense="true" Height="400px">
                        <RowTemplate>
                            <MudTd>@(context.Title)</MudTd>
                            <MudTd>
                                <MudButton Size="Size.Small" @onclick="() => ShowNotice(context)" StartIcon="@Icons.Material.Filled.ZoomIn"/>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="@TextResourceTable.Get("[NoticeCategoryTypeNoticeTab]")">
                    <MudTable Elevation="0" T="NoticeInfo" Items="@ViewModel.NoticeInfoList" Virtualize="true" Dense="true" Height="400px">
                        <RowTemplate>
                            <MudTd>@(context.Title)</MudTd>
                            <MudTd>
                                <MudButton Size="Size.Small" @onclick="() => ShowNotice(context)" StartIcon="@Icons.Material.Filled.ZoomIn"/>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
            </ChildContent>
        </MudTabs>
    </MudPaper>
</MudItem>
<MudItem sm="12" md="6" lg="4" xl="3">
    <MudCard>
        <MudCardHeader>
            <MudSwitch T="bool" Color="Color.Info" @bind-Checked="@ViewModel.ShowDebugInfo" Label="Debug Info"></MudSwitch>
        </MudCardHeader>
        <MudCardContent Style="max-height: 400px; overflow: scroll">
            @if (ViewModel.ShowDebugInfo)
            {
                <pre>
                 @ViewModel.UserSyncData.ToJson(true)
                 </pre>
            }
        </MudCardContent>
    </MudCard>
</MudItem>
</MudGrid>

@code {
    private List<CharacterEquipment> _characterEquipments = new();

    private List<PlayerDataInfo> playerDataInfos = new();

    protected override async Task OnInitializedAsync()
    {
    // this.ViewModel.WhenAnyPropertyChanged().Subscribe(_ => InvokeAsync(StateHasChanged));
    // this.ViewModel.RuntimeInfo.WhenAnyPropertyChanged().Subscribe(_ => InvokeAsync(StateHasChanged));
        ViewModel.WhenAnyValue(d => d.UserSyncData).Subscribe(data =>
        {
            _characterEquipments = data?.UserEquipmentDtoInfos?.Where(d => !string.IsNullOrEmpty(d.CharacterGuid)).Select(d =>
            {
                if (d == null) throw new ArgumentNullException(nameof(d));
                var cha = data.UserCharacterDtoInfos.First(x => x.Guid == d.CharacterGuid);
                var chaMb = CharacterTable.GetById(cha.CharacterId);
                var name = TextResourceTable.Get(chaMb.NameKey);
                var equipmentMb = EquipmentTable.GetById(d.EquipmentId);
                var equipmentName = TextResourceTable.Get(equipmentMb.NameKey);
                equipmentName = $"{equipmentName}/{@TextResourceTable.Get(BaseParameterType.Health)}{d.AdditionalParameterHealth}/{@TextResourceTable.Get(BaseParameterType.Intelligence)}{d.AdditionalParameterIntelligence}/{@TextResourceTable.Get(BaseParameterType.Muscle)}{d.AdditionalParameterMuscle}/{@TextResourceTable.Get(BaseParameterType.Energy)}{d.AdditionalParameterEnergy} ";
                return new CharacterEquipment()
                {
                    CharacterGuid = d.CharacterGuid, CharacterName = name, EquipmentGuid = d.Guid, EquipmentName = equipmentName, UserEquipmentDtoInfo = d
                };
            }).OrderBy(d => d.CharacterGuid).ToList() ?? new List<CharacterEquipment>();
        });
    }

    private void ShowNotice(NoticeInfo context)
    {
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true
        };
        DialogService.ShowMessageBox(context.Title, (MarkupString) context.MainText);
    }

    private async Task ShowPlayerList()
    {
        playerDataInfos = await ViewModel.GetPlayerDataInfo();
        var parameters = new DialogParameters<SelectPlayer>();
        parameters.Add(d => d.PlayerDataInfos, playerDataInfos);
        var dialog = await DialogService.ShowAsync<SelectPlayer>(ResourceStrings.SelectPlayer, parameters, new DialogOptions() {CloseButton = true});
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is PlayerDataInfo playerDataInfo)
        {
            ViewModel.Login(playerDataInfo);
        }
    }

}