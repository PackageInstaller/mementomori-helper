@inject IJSRuntime JsRuntime
@inject MementoMoriFuncs moriFuncs

@page "/"
@using System.Text
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data
@using MementoMori.Ortega.Share.Data.ApiInterface.Battle
@using MementoMori.Ortega.Share.Data.ApiInterface.BountyQuest
@using MementoMori.Ortega.Share.Data.ApiInterface.Equipment
@using MementoMori.Ortega.Share.Data.ApiInterface.TowerBattle
@using MementoMori.Ortega.Share.Enums
@using MementoMori.WebUI.Extensions
@using MementoMori.WebUI.Models
@using StartRequest = MementoMori.Ortega.Share.Data.ApiInterface.TowerBattle.StartRequest
@using StartResponse = MementoMori.Ortega.Share.Data.ApiInterface.TowerBattle.StartResponse

<PageTitle>主页</PageTitle>

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardHeader>
                <MudText>角色信息</MudText>
                <MudButton Disabled="_logining" @onclick="Login">
                    登录
                    @if (_logining)
                    {
                        <MudProgressCircular Size="Size.Small"/>
                    }
                </MudButton>
                <MudButton Disabled="_logining" @onclick="SyncUserData">同步用户信息</MudButton>
            </MudCardHeader>
            <MudCardContent>
                <MudSimpleTable>
                    <table class="table">
                        <tbody>
                        <tr>
                            <td>用户名</td><td>@_userSyncData?.UserStatusDtoInfo?.Name</td>
                        </tr>
                        <tr>
                            <td>玩家ID</td><td>@_userSyncData?.UserStatusDtoInfo?.PlayerId</td>
                        </tr>
                        <tr>
                            <td>友情点</td><td>@_friendPoint</td>
                        </tr>
                        <tr>
                            <td>加入时间</td><td>@_userSyncData?.UserStatusDtoInfo?.CreateAt.ToDateTimeOffset()</td>
                        </tr>
                        <tr>
                            <td>等级</td><td>@_userSyncData?.UserStatusDtoInfo?.Rank</td>
                        </tr>
                        <tr>
                            <td>VIP 等级</td><td>@_userSyncData?.UserStatusDtoInfo?.Vip</td>
                        </tr>
                        <tr>
                            <td>留言</td><td>@_userSyncData?.UserStatusDtoInfo?.Comment</td>
                        </tr>
                        <tr>
                            <td>经验值</td><td>@_userSyncData?.UserStatusDtoInfo?.Exp</td>
                        </tr>
                        <tr>
                            <td>上次登录</td><td>@_userSyncData?.UserStatusDtoInfo?.LastLoginTime.ToDateTimeOffset()</td>
                        </tr>
                        <tr>
                            <td>前次登录</td><td>@_userSyncData?.UserStatusDtoInfo?.PreviousLoginTime.ToDateTimeOffset()</td>
                        </tr>
                        <tr>
                            <td>上次升级</td><td>@_userSyncData?.UserStatusDtoInfo?.LastLvUpTime.ToDateTimeOffset()</td>
                        </tr>
                        <tr>
                            <td>用户名已更改</td><td>@_userSyncData?.UserStatusDtoInfo?.IsAlreadyChangedName</td>
                        </tr>
                        </tbody>
                    </table>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">
        <MudCard>
            <MudCardHeader>快捷操作 <MudButton Disabled="!_isQuickActionExecuting" @onclick="CancelQuickAction">取消操作</MudButton></MudCardHeader>
            <MudCardContent>
                <MudButton Variant="Variant.Filled" Disabled="_isQuickActionExecuting" @onclick="GetLoginBonus">领取每日登录奖励</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@GetVipGift">领取每日VIP礼物</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@GetAutoBattleReward">领取自动战斗奖励</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@BulkTransferFriendPoint">一键赠送/接受友情点</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@PresentReceiveItem">一键领取礼物箱</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@BattleBossQuick">主线boss扫荡3次</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@InfiniteTowerQuick">无穷之塔扫荡3次</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@PvpAuto">PVP自动战斗5次</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@BossHishSpeedBattle">冒险一次高速战斗</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@BountyQuestRewardAuto">祈愿之泉一键领取</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@BountyQuestStartAuto">祈愿之泉一键开始</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@AutoEquipmentInheritance">自动精炼SABC、继承魔装到D装</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@AutoDungeonBattle">时空洞窟自动战斗</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@GetDungeonBattleRelic">输出时空洞窟加护</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@AutoBossRequest">自动刷Boss</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@AutoInfiniteTowerRequest">自动刷无穷之塔</MudButton>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@AutoEquipmentTraning">装备打磨</MudButton>
                <MudSelect T="string" Label="装备ID" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="_equipmentId">
                     @foreach (var e in _characterEquipments)
                    {
                        <MudSelectItem T="string" Value="e.EquipmentGuid">@($"{e.EquipmentName}/{e.UserEquipmentDtoInfo.ReinforcementLv} {e.CharacterName}")</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="_equipmentId" Label="装备Id" Variant="Variant.Text"></MudTextField>
                <MudSelect T="string" @bind-Value="_equipmentTrainingTargetType" Label="类型" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("Health")">耐力</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Intelligence")">魔力</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Muscle")">力量</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Energy")">战技</MudSelectItem>
                </MudSelect>
                <MudTextField T="long" @bind-Value="_equipmentTrainingTargetValue" Label="目标值" Variant="Variant.Text"></MudTextField>
                <MudButton Variant="Variant.Filled" Disabled="@_isQuickActionExecuting" @onclick="@Debug">Debug</MudButton>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>执行结果</MudCardHeader>
            <MudCardContent Style="max-height: 400px; overflow: scroll">
                <pre>
                                @_quickActionResult
                </pre>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent Style="max-height: 300px; overflow: scroll">
                <pre>
                        @_runtimeInfo.ToJson(true)
                        </pre>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent Style="max-height: 400px; overflow: scroll">
                <pre>
                         @_userSyncData.ToJson(true)
                         </pre>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private RuntimeInfo _runtimeInfo;
    private UserSyncData? _userSyncData;

    private bool _logining;
    private bool _isQuickActionExecuting;
    private string _quickActionResult;
    private long _friendPoint;
    private string _equipmentId;
    private string _equipmentTrainingTargetType;
    private long _equipmentTrainingTargetValue;
    private List<CharacterEquipment> _characterEquipments = new List<CharacterEquipment>();

    private CancellationTokenSource _cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        moriFuncs.RuntimeInfoSubject.Subscribe(c =>
        {
            InvokeAsync(() =>
            {
                _runtimeInfo = c;
                StateHasChanged();
            });
        });
        moriFuncs.UserSyncData.Subscribe(data =>
        {
            _userSyncData = data;
            _friendPoint = _userSyncData?.UserItemDtoInfo?.First(d => d.ItemType == ItemType.FriendPoint).ItemCount ?? 0;
            _characterEquipments = data?.UserEquipmentDtoInfos?.Where(d => !string.IsNullOrEmpty(d.CharacterGuid)).Select(d =>
            {
                if (d == null) throw new ArgumentNullException(nameof(d));
                var cha = data.UserCharacterDtoInfos.First(x => x.Guid == d.CharacterGuid);
                var chaMb = Masters.CharacterTable.GetById(cha.CharacterId);
                var name = Masters.TextResourceTable.Get(chaMb.NameKey);
                var equipmentMb = Masters.EquipmentTable.GetById(d.EquipmentId);
                var equipmentName = Masters.TextResourceTable.Get(equipmentMb.NameKey);
                equipmentName = $"{equipmentName}/耐力{d.AdditionalParameterHealth}/魔力{d.AdditionalParameterIntelligence}/力量{d.AdditionalParameterMuscle}/战技{d.AdditionalParameterEnergy} ";
                return new CharacterEquipment()
                {
                    CharacterGuid = d.CharacterGuid, CharacterName = name, EquipmentGuid = d.Guid, EquipmentName = equipmentName, UserEquipmentDtoInfo = d
                };
            }).OrderBy(d => d.CharacterGuid).ToList() ?? new List<CharacterEquipment>();
        });
    }


    private async Task Login()
    {
        _logining = true;
        await moriFuncs.AuthLogin();
        var userData = await moriFuncs.UserGetUserData();
        _logining = false;
    }

    private async Task SyncUserData()
    {
        await moriFuncs.UserGetUserData();
    }

    private async Task ExecuteQuickAction(Func<CancellationToken,Task> func)
    {
        _isQuickActionExecuting = true;
        _cancellationTokenSource = new CancellationTokenSource();
        await func(_cancellationTokenSource.Token);
        _isQuickActionExecuting = false;
        StateHasChanged();
    }

    private void CancelQuickAction()
    {
        if (_cancellationTokenSource == null) return;
        _cancellationTokenSource.Cancel();
    }

    private async Task GetLoginBonus()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var bonus = await moriFuncs.LoginBonusReceiveDailyLoginBonus(DateTime.Now.Day);
            var msg = new StringBuilder("领取的奖励：\n");

            bonus.RewardItemList.PrintUserItems(msg);

            _quickActionResult = msg.ToString();
        });
    }

    private async Task GetVipGift()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var bonus = await moriFuncs.VipGetDailyGift();
            var msg = new StringBuilder("领取的奖励：\n");

            bonus.ItemList.PrintUserItems(msg);

            _quickActionResult = msg.ToString();
        });
    }

    private async Task GetAutoBattleReward()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var bonus = await moriFuncs.BattleRewardAutoBattle();
            var msg = new StringBuilder("领取的奖励：\n");

            msg.AppendLine($"战斗次数 {bonus.AutoBattleRewardResult.BattleCountAll}");
            msg.AppendLine($"胜利次数 {bonus.AutoBattleRewardResult.BattleCountWin}");
            msg.AppendLine($"总时间 {TimeSpan.FromMilliseconds(bonus.AutoBattleRewardResult.BattleTotalTime)}");
            msg.AppendLine($"领民金币 {bonus.AutoBattleRewardResult.GoldByPopulation}");
            msg.AppendLine($"领民潜能珠宝 {bonus.AutoBattleRewardResult.PotentialJewelByPopulation}");

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BulkTransferFriendPoint()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var resp = await moriFuncs.FriendBulkTransferFriendPoint();
            _quickActionResult = "成功";
        });
    }

    private async Task PresentReceiveItem()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var resp = await moriFuncs.PresentReceiveItem();
            var msg = new StringBuilder("领取的奖励：\n");

            resp.ResultItems.Select(d => d.Item).PrintUserItems(msg);

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BattleBossQuick()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            var bossQuickResponse = await moriFuncs.GetResponse<BossQuickRequest, BossQuickResponse>(
                new BossQuickRequest()
                {
                    QuestId = _userSyncData.UserBattleBossDtoInfo.BossClearMaxQuestId,
                    QuickCount = 3
                });
            if (bossQuickResponse.BattleRewardResult == null) return;


            bossQuickResponse.BattleRewardResult.FixedItemList.PrintUserItems(msg);
            bossQuickResponse.BattleRewardResult.DropItemList.PrintUserItems(msg);

            _quickActionResult = msg.ToString();
        });
    }

    private async Task InfiniteTowerQuick()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var tower = _userSyncData.UserTowerBattleDtoInfos.First(d => d.TowerType == TowerType.Infinite);
            var msg = new StringBuilder("领取的奖励：\n");

            var bossQuickResponse = await moriFuncs.GetResponse<TowerBattleQuickRequest, TowerBattleQuickResponse>(
                new TowerBattleQuickRequest()
                {
                    TargetTowerType = TowerType.Infinite, TowerBattleQuestId = tower.MaxTowerBattleId, QuickCount = 3
                });
            if (bossQuickResponse.BattleRewardResult != null)
            {
                bossQuickResponse.BattleRewardResult.FixedItemList.PrintUserItems(msg);
                bossQuickResponse.BattleRewardResult.DropItemList.PrintUserItems(msg);
            };

            _quickActionResult = msg.ToString();
        });
    }

    private async Task PvpAuto()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            for (int i = 0; i < 5; i++)
            {
                var pvpInfoResponse = await moriFuncs.GetResponse<GetPvpInfoRequest, GetPvpInfoResponse>(
                    new GetPvpInfoRequest());

                var pvpRankingPlayerInfo = pvpInfoResponse.MatchingRivalList.OrderBy(d => d.DefenseBattlePower).First();

                var pvpStartResponse = await moriFuncs.GetResponse<PvpStartRequest, PvpStartResponse>(new PvpStartRequest()
                {
                    RivalPlayerRank = pvpRankingPlayerInfo.CurrentRank,
                    RivalPlayerId = pvpRankingPlayerInfo.PlayerInfo.PlayerId
                });

                pvpStartResponse.BattleRewardResult.FixedItemList.PrintUserItems(msg);
                pvpStartResponse.BattleRewardResult.DropItemList.PrintUserItems(msg);
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BountyQuestRewardAuto()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");
            var getListResponse = await moriFuncs.GetResponse<GetListRequest, GetListResponse>(
                new GetListRequest());

            var questIds = getListResponse.UserBountyQuestDtoInfos
                .Where(d => d.BountyQuestEndTime > 0)
                .Select(d => d.BountyQuestId).ToList();

            if (questIds.Count > 0)
            {
                var rewardResponse = await moriFuncs.GetResponse<RewardRequest, RewardResponse>(new RewardRequest() {BountyQuestIds = questIds, IsQuick = false});
                rewardResponse.RewardItems.PrintUserItems(msg);
            }

            _quickActionResult = msg.ToString();
        });
    }

    private async Task BountyQuestStartAuto()
    {
        await ExecuteQuickAction(async (token) =>
        {
            _quickActionResult = "还未实现";
    // var msg = new StringBuilder();
    // var getListResponse = await moriFuncs.GetResponse<GetListRequest, GetListResponse>(
    //     new GetListRequest());


    // foreach (var bountyQuestInfo in getListResponse.BountyQuestInfos)
    // {
    //     foreach (var userCharacterDtoInfo in _userSyncData.UserCharacterDtoInfos)
    //     {
    //     }
    // }


    // _quickActionResult = msg.ToString();
        });
    }

    private async Task AutoEquipmentInheritance()
    {
        await ExecuteQuickAction(async (token) =>
        {
            await moriFuncs.AutoEquipmentInheritance();
    // var msg = new StringBuilder("角色列表：\n");
    //
    // foreach (var userCharacterDtoInfo in _userSyncData.UserCharacterDtoInfos)
    // {
    //     var characterMb = Masters.CharacterTable.GetById(userCharacterDtoInfo.CharacterId);
    //     var name = Masters.TextResourceTable.Get(characterMb.NameKey);
    //     msg.AppendLine($"名称：{name} 等级： {userCharacterDtoInfo.Level} 稀有度：{characterMb.RarityFlags}");
    // }
            _quickActionResult = "完成";
        });
    }

    private async Task BossHishSpeedBattle()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");

            var req = new QuickRequest() {QuestQuickExecuteType = QuestQuickExecuteType.Currency, QuickCount = 1};
            var quickResponse = await moriFuncs.GetResponse<QuickRequest, QuickResponse>(req);

            msg.AppendLine($"金币 {quickResponse.AutoBattleRewardResult.GoldByPopulation}");
            msg.AppendLine($"潜能宝珠 {quickResponse.AutoBattleRewardResult.PotentialJewelByPopulation}");
            msg.AppendLine($"角色经验 {quickResponse.AutoBattleRewardResult.BattleRewardResult.CharacterExp}");
            msg.AppendLine($"额外金币 {quickResponse.AutoBattleRewardResult.BattleRewardResult.ExtraGold}");
            msg.AppendLine($"用户经验 {quickResponse.AutoBattleRewardResult.BattleRewardResult.PlayerExp}");
            msg.AppendLine($"升级 {quickResponse.AutoBattleRewardResult.BattleRewardResult.RankUp}");

            quickResponse.AutoBattleRewardResult.BattleRewardResult.FixedItemList.PrintUserItems(msg);
            quickResponse.AutoBattleRewardResult.BattleRewardResult.DropItemList.PrintUserItems(msg);

            _quickActionResult = msg.ToString();
        });
    }

    private async Task AutoDungeonBattle()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");

            await moriFuncs.AutoDungeonBattle();

            _quickActionResult = msg.ToString();
        });
    }

    private async Task Debug()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var msg = new StringBuilder("领取的奖励：\n");

            var giveAllSrCharacterResponse = await moriFuncs.GetResponse<NextQuestRequest, NextQuestResponse>(new NextQuestRequest());

            _quickActionResult = giveAllSrCharacterResponse.ToJson(true);
        });
    }

    private async Task AutoBossRequest()
    {
        await ExecuteQuickAction(async (token) =>
        {
            StringBuilder msg = new StringBuilder();
            int totalCount = 0;
            int winCount = 0;
            int errCount = 0;
            while (!token.IsCancellationRequested)
            {
                try
                {
                    await moriFuncs.UserGetUserData();
                    var bossResponse = await moriFuncs.GetResponse<BossRequest, BossResponse>(new BossRequest() {QuestId = _userSyncData.UserBattleBossDtoInfo.BossClearMaxQuestId + 1});
                    var win = bossResponse.BattleResult.SimulationResult.BattleEndInfo.IsWinAttacker();
                    totalCount++;
                    if (win)
                    {
                        var nextQuestResponse = await moriFuncs.GetResponse<NextQuestRequest, NextQuestResponse>(new NextQuestRequest());
                        winCount++;
                    }
                    var m = $"挑战 boss 一次：{win} 总次数：{totalCount} 胜利次数：{winCount}, Err: {errCount}";
                    Console.WriteLine(m);
                    _quickActionResult = msg.AppendLine(m).ToString();
                    StateHasChanged();
                    var t = 1;
                    await Task.Delay(t);
                }
                catch (Exception e)
                {
                    errCount++;
                    if (errCount > 10)
                    {
                        return;
                    }
                    await moriFuncs.AuthLogin();
                }
            }
        });
    }
    private async Task AutoInfiniteTowerRequest()
    {
        await ExecuteQuickAction(async (token) =>
        {
            StringBuilder msg = new StringBuilder();
            int totalCount = 0;
            int winCount = 0;
            int errCount = 0;
            while (!token.IsCancellationRequested)
            {
                try
                {
                    await moriFuncs.UserGetUserData();
                    var tower = _userSyncData.UserTowerBattleDtoInfos.First(d => d.TowerType == TowerType.Infinite);
                    var bossQuickResponse = await moriFuncs.GetResponse<StartRequest, StartResponse>(
                        new StartRequest()
                        {
                            TargetTowerType = TowerType.Infinite, TowerBattleQuestId = tower.MaxTowerBattleId + 1
                        });
                    var win = bossQuickResponse.BattleResult.SimulationResult.BattleEndInfo.IsWinAttacker();
                    totalCount++;
                    if (win)
                    {
                        winCount++;
                    }
                    var m = $"挑战无穷之塔一次：{win} 总次数：{totalCount} 胜利次数：{winCount}, Err: {errCount}";
                    Console.WriteLine(m);
                    _quickActionResult = msg.AppendLine(m).ToString();
                    StateHasChanged();
                    var t = 1;
                    await Task.Delay(t);
                }
                catch (Exception e)
                {
                    errCount++;
                    if (errCount > 10)
                    {
                        return;
                    }
                    await moriFuncs.AuthLogin();
                }
            }
        });
    }

    private async Task AutoEquipmentTraning()
    {
        await ExecuteQuickAction(async (token) =>
        {
            StringBuilder msg = new StringBuilder();
            int totalCount = 0;
            int winCount = 0;
            while (true)
    // for (int i = 0; i < 3; i++)
            {
                var equipment = _userSyncData.UserEquipmentDtoInfos.First(d => d.Guid == _equipmentId);
                switch (_equipmentTrainingTargetType)
                {
                    case "Health" when equipment.AdditionalParameterHealth >= _equipmentTrainingTargetValue:
                        return;
                    case "Energy" when equipment.AdditionalParameterEnergy >= _equipmentTrainingTargetValue:
                        return;
                    case "Intelligence" when equipment.AdditionalParameterIntelligence >= _equipmentTrainingTargetValue:
                        return;
                    case "Muscle" when equipment.AdditionalParameterMuscle >= _equipmentTrainingTargetValue:
                        return;
                }
                await moriFuncs.UserGetUserData();
                var response = await moriFuncs.GetResponse<TrainingRequest, TrainingResponse>(new TrainingRequest() {EquipmentGuid = _equipmentId, ParameterLockedList = new List<BaseParameterType>()});
                await moriFuncs.UserGetUserData();
                var m = $"打磨装备 耐力 {equipment.AdditionalParameterEnergy} 魔力 {equipment.AdditionalParameterIntelligence} 力量 {equipment.AdditionalParameterMuscle} 战技 {equipment.AdditionalParameterEnergy}";
                Console.WriteLine(m);
                _quickActionResult = msg.AppendLine(m).ToString();
                StateHasChanged();
                var t = 1;
                await Task.Delay(t);
            }
        });
    }


    private async Task GetDungeonBattleRelic()
    {
        await ExecuteQuickAction(async (token) =>
        {
            var list = Masters.DungeonBattleRelicTable.GetArray().Select(d =>
            {
                return $"\"{d.Id}\": \"{d.DungeonRelicRarityType}:{Masters.TextResourceTable.Get(d.NameKey)}:{Masters.TextResourceTable.Get(d.DescriptionKey)}\",";
                return new
                {
                    Id = d.Id,
                    Name = $"{d.DungeonRelicRarityType}:{Masters.TextResourceTable.Get(d.NameKey)}:{Masters.TextResourceTable.Get(d.DescriptionKey)}",
                }.ToJson();
            });

    // var strings = string.Join("\n", list.Select(d => $"{d.Id}\t{d.Name}\t{d.RarityType}\t{d.Desc}"));

    // var strings = list.GroupBy(d => d.Name).Select(d =>
    // {
    //     if (d.Count() == 1)
    //     {
    //         return $"{d.First().Id}\t{d.Key}\t{d.First().RarityType}\t{d.First().Desc}";
    //     }
    //
    //     var percentsList = new List<List<string>>();
    //     foreach (var x1 in d)
    //     {
    //         percentsList.Add(Regex.Matches(x1.Desc, @"[\d\.]+\%").Select(d => d.Value).ToList());
    //     }
    //     var index = 0;
    //     var desc = Regex.Replace(d.First().Desc, @"[\d\.]+\%", m =>
    //     {
    //         var join = string.Join("/", percentsList.Select(d => d[index]));
    //         index++;
    //         return join;
    //     });
    //     return $"{d.First().Id}\t{d.Key}\t{d.First().RarityType}\t{desc}";
    // });

            _quickActionResult = string.Join("\n", list);
        });
    }



}