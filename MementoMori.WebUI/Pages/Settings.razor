@inject ISnackbar Snackbar
@using MementoMori.Option
@using MementoMori.Common.Localization
@using MementoMori.Ortega.Common.Utils
@using MementoMori.Ortega.Share
@using MementoMori.Ortega.Share.Data.Item
@using MementoMori.Ortega.Share.Enums
@using MementoMori.WebUI.Pages.Components.Settings
@inject IWritableOptions<GameConfig> WritableGameConfig
@inject IWritableOptions<AuthOption> authOption

@inherits MementoMori.WebUI.Models.AccountComponent
@page "/settings"

<MudGrid>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <AccountManagement />
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <AutoJobSwitch />
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <AutoJobCron />
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <AutoJobNextExecution />
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>@Masters.TextResourceTable.Get("[CommonFooterGachaButtonLabel]") (Global)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudField Label="@ResourceStrings.AutoGachaConsumeItems" Variant="Variant.Outlined">
                    <MudSelect T="UserItem" Label="" MultiSelection="true" Dense="true" Comparer="@(new UserItemComparer())"
                               @bind-SelectedValues="GachaConfigAutoGachaConsumeUserItems" MultiSelectionTextFunc="list => string.Format(ResourceStrings.SelectedXItems, list.Count)">
                        @foreach (var item in _gachaConsumeItems)
                        {
                            <MudSelectItem T="UserItem" Value="@item">@ItemUtil.GetItemName(item)</MudSelectItem>
                        }
                    </MudSelect>
                </MudField>

            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>@Masters.TextResourceTable.Get("[CommonHeaderBountyQuestLabel]") (Global)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudField Label="@ResourceStrings.BountyQuestTargetItems" Variant="Variant.Outlined">
                    <MudSelect T="UserItem" Label="" MultiSelection="true" Dense="true" Comparer="@(new UserItemComparer())"
                               @bind-SelectedValues="BountyQuestAutoTargetItems" MultiSelectionTextFunc="list => string.Format(ResourceStrings.SelectedXItems, list.Count)">
                        @foreach (var item in _bountyQuestRewardItems)
                        {
                            <MudSelectItem T="UserItem" Value="@item">@ItemUtil.GetItemName(item)</MudSelectItem>
                        }
                    </MudSelect>
                </MudField>

            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>@Masters.TextResourceTable.Get("[CommonHeaderDungeonBattleLabel]") (Global)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSwitch Label="@ResourceStrings.PreferTreasureChest" @bind-Checked="DungeonBattlePreferTreasureChest" Color="Color.Primary"/>
                <MudNumericField Label="@ResourceStrings.MaxUseRecoveryItem" @bind-Value="DungeonBattleMaxUseFruitOfHealing" Min="0" Max="99"/>
                <MudField Label="@ResourceStrings.DungeonBattleTargetItems" Variant="Variant.Outlined">
                    @foreach (var item in DungeonBattleShopTargetItems)
                    {
                        var text = $"{ItemUtil.GetItemName(item.ItemType, item.ItemId)} {item.MinDiscountPercent}{Masters.TextResourceTable.Get("[ShopDiscountLabel]")}";
                        <MudChip OnClose="() => DungeonBattleRemoveItem(item)">@text</MudChip>
                    }
                </MudField>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ShowDungeonBattleSelectItemDialog">@ResourceStrings.Add</MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>@Masters.TextResourceTable.Get("[CommonHeaderLocalRaidLabel]") (Global)</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Outlined" OnClick="SaveLocalRaidConfig">@Masters.TextResourceTable.Get("[CommonSaveLabel]")</MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudField Label="@ResourceStrings.Select_tasks_based_on_reward_quantity_and_weight" Variant="Variant.Outlined">
                    @foreach (var reward in _localRaidRewardItems)
                    {
                        <MudNumericField Label="@ItemUtil.GetItemName(reward.ItemType, reward.ItemId)" Margin="Margin.None" @bind-Value="reward.Weight" />
                    }
                </MudField>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <!--商城-->
                    <MudText>@Masters.TextResourceTable.Get("[CommonHeaderExchangeLabel]") (Global)</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton OnClick="ShopAutoBuyRestoreDefault">@ResourceStrings.ResettoDefault</MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudField Label="@ResourceStrings.ShopAutoBuyItems" Variant="Variant.Outlined">
                    @foreach (var item in ShopAutoBuyItems)
                    {
                        var buy = item.BuyItem == null ? ResourceStrings.AnyItems : $"{ItemUtil.GetItemName(item.BuyItem.ItemType, item.BuyItem.ItemId)}";
                        var consume = item.ConsumeItem == null ? ResourceStrings.AnyItems : $"{ItemUtil.GetItemName(item.ConsumeItem.ItemType, item.ConsumeItem.ItemId)}";
                        var text = string.Format(ResourceStrings.BuyWith, consume, buy);
                        <MudChip OnClose="() => RemoveShopAutoBuyItem(item)">@text @($"{item.MinDiscountPercent}{Masters.TextResourceTable.Get("[ShopDiscountLabel]")}")</MudChip>
                    }
                </MudField>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <ItemsSetting />
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <PvpSettings LeagueType="0"></PvpSettings>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <PvpSettings LeagueType="1"></PvpSettings>
    </MudItem>
    <MudItem sm="12" md="6" lg="4" xl="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>@ResourceStrings.Others (Global)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudField Label="@ResourceStrings.AutoRequestDelay" Variant="Variant.Outlined">
                    <MudNumericField @bind-Value="AutoRequestDelay"></MudNumericField>
                </MudField>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudDialog @bind-IsVisible="_dungeonBattleSelectItemDialog" Options="@(new DialogOptions() {CloseButton = true})">
    <DialogContent>
        <MudSelect T="UserItem" @bind-Value="_dungeonBattleSelectedItem">
            @foreach (var item in _dungeonBattleShopItems)
            {
                <MudSelectItem T="UserItem" Value="item">@(ItemUtil.GetItemName(item))</MudSelectItem>
            }
        </MudSelect>
        <MudSlider Min="0" Max="100" Step="10" @bind-Value="_dungeonBattleSelectedDiscount">@($"{ResourceStrings.DiscountPercentageforProducts} {_dungeonBattleSelectedDiscount}{Masters.TextResourceTable.Get("[ShopDiscountLabel]")}")</MudSlider>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ConfirmDungeonBattleSelectItem">@Masters.TextResourceTable.Get("[CommonDecisionLabel]")</MudButton>
    </DialogActions>
</MudDialog>


@code {

    List<UserItem> _gachaConsumeItems = new();
    List<UserItem> _bountyQuestRewardItems = new();
    List<UserItem> _dungeonBattleShopItems = new();
    private IEnumerable<UserItem> _selected;
    UserItem _dungeonBattleSelectedItem;
    int _dungeonBattleSelectedDiscount;
    bool _dungeonBattleSelectItemDialog;

    
    List<GameConfig.WeightedItem> _localRaidRewardItems;


    protected override async Task AccountChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _gachaConsumeItems = Masters.ItemTable.GetArray()
            .Where(d => d.ItemType == ItemType.GachaTicket || d.ItemType == ItemType.FriendPoint || d.ItemType == ItemType.Gold)
            .Select(d => new UserItem() {ItemId = d.ItemId, ItemType = d.ItemType}).ToList();
        _bountyQuestRewardItems.AddRange(new[]
        {
            new UserItem() {ItemType = ItemType.Gold, ItemId = 1},
            new UserItem() {ItemType = ItemType.CurrencyFree, ItemId = 1},
            new UserItem() {ItemType = ItemType.CharacterTrainingMaterial, ItemId = 2},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 4},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 5},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 6},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 7},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 8},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 9},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 10},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 27},
            new UserItem() {ItemType = ItemType.TreasureChest, ItemId = 28}
        });
        _dungeonBattleShopItems.AddRange(new[]
        {
            new UserItem() {ItemType = ItemType.EquipmentRarityCrystal, ItemId = 1}
        });
        _localRaidRewardItems = WritableGameConfig.Value.LocalRaid.RewardItems;
    }

    #region DungeonBattle

    private void DungeonBattleRemoveItem(GameConfig.ShopDiscountItem item)
    {
        var tmp = DungeonBattleShopTargetItems.ToList();
        tmp.Remove(item);
        DungeonBattleShopTargetItems = tmp;
    }

    private void ShowDungeonBattleSelectItemDialog()
    {
        _dungeonBattleSelectItemDialog = true;
        _dungeonBattleSelectedItem = null;
        _dungeonBattleSelectedDiscount = 0;
    }

    private void ConfirmDungeonBattleSelectItem()
    {
        if (_dungeonBattleSelectedItem == null)
        {
            return;
        }
        var tmp = DungeonBattleShopTargetItems.ToList();
        var existing = tmp.Find(d => d.ItemType == _dungeonBattleSelectedItem.ItemType && d.ItemId == _dungeonBattleSelectedItem.ItemId);
        if (existing != null)
        {
            existing.MinDiscountPercent = _dungeonBattleSelectedDiscount;
        }
        else
        {
            tmp.Add(new GameConfig.ShopDiscountItem()
            {
                ItemId = _dungeonBattleSelectedItem.ItemId,
                ItemType = _dungeonBattleSelectedItem.ItemType,
                MinDiscountPercent = _dungeonBattleSelectedDiscount
            });
        }
        DungeonBattleShopTargetItems = tmp;
        _dungeonBattleSelectItemDialog = false;
    }


    IEnumerable<UserItem> GachaConfigAutoGachaConsumeUserItems
    {
        get => WritableGameConfig.Value.GachaConfig.AutoGachaConsumeUserItems;
        set => WritableGameConfig.Update(x => x.GachaConfig.AutoGachaConsumeUserItems = value.ToList());
    }

    IEnumerable<UserItem> BountyQuestAutoTargetItems
    {
        get => WritableGameConfig.Value.BountyQuestAuto.TargetItems;
        set => WritableGameConfig.Update(x => x.BountyQuestAuto.TargetItems = value.ToList());
    }

    IEnumerable<GameConfig.ShopDiscountItem> DungeonBattleShopTargetItems
    {
        get => WritableGameConfig.Value.DungeonBattle.ShopTargetItems;
        set => WritableGameConfig.Update(x => x.DungeonBattle.ShopTargetItems = value.ToList());
    }

    bool DungeonBattlePreferTreasureChest
    {
        get => WritableGameConfig.Value.DungeonBattle.PreferTreasureChest;
        set => WritableGameConfig.Update(x => x.DungeonBattle.PreferTreasureChest = value);
    }

    int DungeonBattleMaxUseFruitOfHealing
    {
        get => WritableGameConfig.Value.DungeonBattle.MaxUseRecoveryItem;
        set => WritableGameConfig.Update(x => x.DungeonBattle.MaxUseRecoveryItem = value);
    }

    #endregion

    #region Shop

    public List<GameConfig.ShopAutoBuyItem> ShopAutoBuyItems
    {
        get => WritableGameConfig.Value.Shop.AutoBuyItems;
        set => WritableGameConfig.Update(x => x.Shop.AutoBuyItems = value);
    }

    private void RemoveShopAutoBuyItem(GameConfig.ShopAutoBuyItem item)
    {
        var tmp = ShopAutoBuyItems.ToList();
        tmp.Remove(item);
        ShopAutoBuyItems = tmp;
    }

    private void ShopAutoBuyRestoreDefault()
    {
        ShopAutoBuyItems = new List<GameConfig.ShopAutoBuyItem>()
        {
            new() {BuyItem = new UserItem() {ItemType = ItemType.EquipmentRarityCrystal, ItemId = 1}, ShopTabId = 1, MinDiscountPercent = 20},
            new() {ShopTabId = 1, ConsumeItem = new UserItem() {ItemType = ItemType.Gold, ItemId = 1}}
        };
    }

    #endregion

    #region Other

    public int AutoRequestDelay
    {
        get => WritableGameConfig.Value.AutoRequestDelay;
        set => WritableGameConfig.Update(x => x.AutoRequestDelay = value);
    }

    #endregion

    private void SaveLocalRaidConfig()
    {
        WritableGameConfig.Update(opt =>
        {
            opt.LocalRaid.RewardItems = _localRaidRewardItems;
        });
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(ResourceStrings.Save_successful, Severity.Success);
    }

    private class UserItemComparer : IEqualityComparer<UserItem>
    {
        public bool Equals(UserItem x, UserItem y)
        {
            if (ReferenceEquals(x, y)) return true;
            if (ReferenceEquals(x, null)) return false;
            if (ReferenceEquals(y, null)) return false;
            if (x.GetType() != y.GetType()) return false;
            return x.ItemId == y.ItemId && x.ItemType == y.ItemType;
        }

        public int GetHashCode(UserItem obj)
        {
            return HashCode.Combine(obj.ItemId, (int) obj.ItemType);
        }
    }

}