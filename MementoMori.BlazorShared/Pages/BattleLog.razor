@using MementoMori.Option
@using MementoMori.Ortega.Share.Data.Battle.Result
@using Newtonsoft.Json
@using System.Text
@using MementoMori.Common.Localization
@inject IWritableOptions<GameConfig> GameConfig
@page "/battlelog"
@inject IJSRuntime JS

<MudText Typo="Typo.h6">
    @ResourceStrings.You_can_download_the_battle_log_and_parse_it_here: <MudLink Href="https://mentemori.icu/battle_log.html" Target="_blank">Battle Log Viewer</MudLink>
</MudText>

<MudStack Row="true" Class="justify-start align-center">
    <MudIconButton Icon="@Icons.Material.Filled.Pageview" Size="Size.Small" Variant="Variant.Outlined" OnClick="() => ViewBattleLog(SelectedBattleResult)"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.Download" Size="Size.Small" Variant="Variant.Outlined" OnClick="() => DownloadBattleLog(SelectedBattleResult)"></MudIconButton>
    <MudSelect Label="Battle Type" T="BattleLogType" @bind-Value="selectedBattleLogType" Dense="true">
        @foreach (BattleLogType battleLogType in Enum.GetValues(typeof(BattleLogType)))
        {
            <MudSelectItem Value="battleLogType">
                <MudText Inline="true">@battleLogType</MudText>
            </MudSelectItem>
        }
    </MudSelect>
    <MudSelect Label="Log file" @bind-Value="SelectedBattleResult" Dense="true">
        @foreach (var filename in BattleResults)
        {
            <MudSelectItem Value="filename">
                <MudText Inline="true">@filename</MudText>
            </MudSelectItem>
        }
    </MudSelect>
</MudStack>

<iframe id="log_viewer" src="https://mentemori.icu/battle_log.html"></iframe>
<style>
    #log_viewer {
        width: 100%;
        height: 800px;
        border: none;
    }
</style>

@code {
    private List<string> BattleResults { get; set; } = new();

    private BattleLogType selectedBattleLogType
    {
        get => _selectedBattleLogType;
        set
        {
            _selectedBattleLogType = value;
            this.GetLogs();
        }
    }

    private string SelectedBattleResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Directory.Exists(GameConfig.Value.BattleLogDir))
        {
            return;
        }

        GetLogs();
    }

    private void GetLogs()
    {
        var files = Directory.GetFiles(GameConfig.Value.BattleLogDir);
        var prefix = logTypePrefixes[selectedBattleLogType];
        BattleResults.Clear();
        foreach (var file in files.OrderDescending())
        {
            var fileName = Path.GetFileName(file);
            if (!fileName.StartsWith(prefix)) continue;
            BattleResults.Add(fileName);
        }
        SelectedBattleResult = BattleResults.FirstOrDefault();
    }

    private async Task DownloadBattleLog(string filename)
    {
        if (string.IsNullOrEmpty(filename)) return;
        if (!ReadLogContent(filename, out var json)) return;
        var bytes = Encoding.UTF8.GetBytes(json);
        using var streamRef = new DotNetStreamReference(new MemoryStream(bytes));
        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }

    private bool ReadLogContent(string filename, out string json)
    {
        json = null;
        if (string.IsNullOrEmpty(filename)) return false;
        var path = Path.Combine(GameConfig.Value.BattleLogDir, filename);
        var content = File.ReadAllText(path);
        var battleResult = JsonConvert.DeserializeObject<BattleResult>(content);
        if (battleResult == null)
        {
            return false;
        }
        var obj = new
        {
            BattleSimulationResult = battleResult.SimulationResult
        };
        json = JsonConvert.SerializeObject(obj);
        return true;
    }

    private async Task ViewBattleLog(string filename)
    {
        if (string.IsNullOrEmpty(filename)) return;
        if (!ReadLogContent(filename, out var json)) return;
        await JS.InvokeVoidAsync("showBattleLog", json);
    }

    public enum BattleLogType
    {
        Main,
        TowerInfinite,
        TowerBlue,
        TowerRed,
        TowerGreen,
        TowerYellow,
        BattleLeague,
        LegendLeague
    }

    private Dictionary<BattleLogType,string> logTypePrefixes = new()
    {
        { BattleLogType.Main, "main-" },
        { BattleLogType.TowerInfinite, "tower-Infinite-" },
        { BattleLogType.TowerBlue, "tower-Blue-" },
        { BattleLogType.TowerRed, "tower-Red-" },
        { BattleLogType.TowerGreen, "tower-Green-" },
        { BattleLogType.TowerYellow, "tower-Yellow-" },
        { BattleLogType.BattleLeague, "battleleague-" },
        { BattleLogType.LegendLeague, "legendleague-" },
    };

    private BattleLogType _selectedBattleLogType = BattleLogType.Main;

}